Требования:
1.
Создать виртуальное окружение, в котором программа далее будет установлена.
В PyCarm это делается автоматически при создании нового проекта, т.е. File -> New Project -> в пункте New environment using выбираем, работать с окружением virtualenv или conda.
После создания проекта и виртуального окружения можно поместить код и остальные файлы в проект. В PyCharm также при работе с проектом в первый раз требуется выбрать интерпретатор питона по кнопке Add Interpreter или Edit Configuration, который будет выполнять код. Нужно после перехода в меню выбора интерпретатора выбрать в поле Script Path путь до текущего проекта.
Иначе же, при работе в PyCharm или любой другой среде разработки при отсутствии установленного виртуального окружения внутри проекта в терминале нужно прописать py -m venv venv

2.
Microsoft Visual c++ 14.0 or greater, ссылка на скачивание:
https://wiki.python.org/moin/WindowsCompilers#Microsoft_Visual_C.2B-.2B-_14.2_standalone:_Build_Tools_for_Visual_Studio_2019_.28x86.2C_x64.2C_ARM.2C_ARM64.29
или
https://visualstudio.microsoft.com/ru/visual-cpp-build-tools/
Откройте установщик Visual Studio.
Найдите Visual Studio Build Tools и нажмите «Modify».
Добавьте галочку к Visual C++ build tools, а затем нажмите «Modify» в правом нижнем углу, чтобы установить их.
Также рекомендуется прописать в терминале для обновления рабочих инструментов:
pip install --upgrade setuptools

3.
Необходимо установить пакеты, прописанные в requirements.txt, сделать это можно автоматически, если рабочее окружение (например PyCharm) предложит такую опцию.
Либо самостоятельно через терминал все требуемые пакеты pip install -r requirements.txt , по отдельности можно установить через pip install <пакет> == <версия> .
Если возникают проблемы с установкой пакетов, то возможно требуется установить вручную некоторое количество пакетов, от которых зависит неустановившийся пакет. По коду ошибки можно увидеть, что пошло не так и что возможно требуется установить отдельно.
При наличии Anaconda и работе в окружении Conda устанавливать пакеты можно и удобно через conda install -c conda-forge <package_name> = <version>.

4.
Файл с данными по формату должен быть подобен файлу ТПС_Тест.xlsx, который лежит в папке support_files.
Важно, чтобы в excel числа в ячейках имели числовой формат, а не строчный или какой-либо ещё, так как при считывании питоном данных он не сможет конвертировать строчный формат в float().
Названия НБ и АЗС рекомендуется использовать без символа "\" или каких-либо специальных сложных символов (но можно ":", "/")

5.
Алгоритм glpk должен быть установлен через терминал (требуется Microsoft Visual c++ ver >=14.0):
Наиболее удобный вариант - при наличии Anaconda: в терминале conda install -c conda-forge glpk
Без Anaconda сложнее:
Скачать glpk через https://sourceforge.net/projects/winglpk/files/winglpk/GLPK-4.55/winglpk-4.55.zip/download или более новую версию напрямую https://sourceforge.net/projects/winglpk/ 
Распакуйте архив и скопируйте всю папку w64 в C:\w64
Включите папку C:\w64 в системный PATH (чтобы glpsol.exe был найден), инструкция: https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/


Инструкции:
1.
Запускать код можно как через Interface.py, так и через pyomo_piecewise.py.
В первом случае будет запущена программа с интерфейсом, где через интерфейс можно поставить необходимые параметры для задачи.
Во втором случае путь к файлу, файл, алгоритм и отрисовка карт выбираются вручную в конце файла pyomo_piecewise.py (~ 724-749 строчки кода).

2.
Если при использовании медленного нелинейного алгоритма ipopt возникают проблемы с памятью (выдаётся ошибка или предупреждение и алгоритм отказывается считать),
можно уменьшить параметр mumps_mem_percent на 100 или более, что должно снизить потребление памяти алгоритмом (возможна ситуация, что и это может не помочь, если задача слишком велика).

3.
Вся настройка содержимого карт производится в методе "routes_map" класса "OptimizationRoutes"
На данный момент карты рисуются для России и Беларуси, другие регионы не предусмотрены. Если необходимо отрисовать карты с участием Беларуси, в названии файла должно быть слово "Беларусь".
Цвета, которыми на картах обозначаются точки для разных НБ, определены в списке "colors" (~ 512-513 строчки кода).
В интернете по соответствующему запросу можно найти палитру цветов matplotlib, которые далее возможно использовать в списке "colors".
Цвета АЗС для одной НБ задаются на ~ 618-624 строчках кода в переменной "color".
Размер точек для АЗС на карте задаётся на ~ 627-629 строчках кода для одной или сразу всех НБ в параметре "s" внутри метода "scatter".
Размер точек для НБ задаётся на ~ 669-671 строчках кода.
Подписи осей в виде координатной сетки можно делать видимыми и невидимыми для одной или всех НБ на ~ 632-633 и ~ 704-705 строчках кода соответственно.
Размеры точек и текста для легенды настраиваются на ~ 676-683 и ~ 709-712 строчках кода для одной или сразу всех НБ на карте (размер точки в легенде - markersize, размер текста - 'size').
Количество отображаемых городов можно регулировать на ~ 576-587 строчках кода (регулируется заданием минимального населения, начиная с которого соответствующие города будут отображаться).
Разрешение карты, её детализированность задаётся параметром dpi на ~ 495 и ~ 591 строчках кода.



